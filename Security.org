#+INCLUDE: "preamble.org"

#+TITLE: Information Security 
#+AUTHOR: Mo, Yilin
#+DATE: Nov 2020 

#+KEYWORDS: Security
#+DESCRIPTION: security for internet of things

#+BEGIN_SRC ipython :session :exports none
from bokeh.resources import CDN
from bokeh.plotting import figure, show
from bokeh.embed import autoload_static
from bokeh.layouts import gridplot
from bokeh.models import Range1d, Label
from numpy import *
from bokeh.palettes import Category10_10

width = 1200
height = 600

def step_func(x, x0, y0):
    index = argsort(abs(x - 0.5 - x0))[0]
    return y0[index]
#+END_SRC

* Introduction

** Core Questions
   
** Learning Objectives

** Table of Contents
   :PROPERTIES:
   :UNNUMBERED: notoc
   :END:
#+REVEAL_TOC: headlines 1

* Information Security 
  
** Why *Security*?
   
** Security Risks 
   - The next generation of systems: *Smart Grids*, *Smart Buildings*, *Internet of Things*, will make extensive use of widespread sensing and networking.
   - As the systems become "/smarter/", they are also more vulnerable to malicious attacks.
   {{{revealgrid(1, "./smartcps.grid", 20, 3, 1, "\"ga1 ga2 ga3\"")}}}
   
*** The First Cyber-physical system Malware: Stuxnet

    - Stuxnet is the first discovered malware that spies on and subverts industrial control systems. It was discovered in June 2010.
      {{{revealimg("./stuxnet.meta","Stuxnet Incident","auto",nil,'none)}}}

*** Threats to Industrial Control Systems
   
    - In FY 2016, ICS-CERT received *290* incidents. The scope of incidents includes: {{{reveallicense("./cert.meta","auto",nil,'none)}}}
      * Unauthorized access, 
      * Exploitation of zero-day vulnerabilities,  
      * Malware infections within air-gapped control system networks.

*** Attacks on Critical Infrastructure

- A Successful attack on *critical infrastructure* can be devastating.
      {{{revealgrid(2, "./powergridattack.grid", 50, 2, 1, "\"ga1 ga2 \"")}}}
- Vitek Boden
  - Arrested in Queensland, Australia on April 23, 2000
  - Found guilty of computer hacking
  - Took control of municipal water system
  - Dumped ~1 million liters of raw sewage into local
  - waterways and parks

*** Attack Through Supply Chain

    - 70% of the components for Boeing 787 are manufactured by other suppliers cite:Tang2009
      {{{revealimg("./boeing.meta","Supply Chain for Boeing 787","auto",nil,'none)}}}

** Key Information Security Concepts

*** The CIA triad
- Confidentiality
  - Information is not made available or disclosed to unauthorized individuals, entities, or processes.
- Integrity
  - Data cannot be modified in an unauthorized or undetected manner.
- Availability
  - Information must be available when it is needed.
  - Information need to be *stored, processed, and communicated* in a timely manner.
*** Case Study of Smart Grid
   
   - A case study for smart grid cite:Mo2011
   |                 | Control Signal                | Measurements                   | Software           |
   | Confidentiality | Exposure of System Structure  | Unauthorized Access            | Piracy             |
   | Integrity       | *Changes of Control Command*  | *Incorrect Data*              | *Malicious Software* |
   | Availability    | *Inability to Control the Grid* | *Unavailability of Measurements* | N/A                |
 

*** Other Considerations
- Non-Repudiation
  - One party of a transaction cannot deny having received a transaction;
  - Nor can the other party deny having sent a transaction
  - Legal implications
  - Digital Signature can be used to enforce non-repudiation
- Privacy
  - /Wikipedia/: Privacy is the ability of an individual or group to seclude themselves or information about themselves, and thereby express themselves *selectively*.
  - Not to be confused with confidentiality
  - Confidentiality: information is not disclosed to *unauthorized users*
  - Privacy: *authorized users* CANNOT infer private information from available data
    - Utility v.s. Privacy

** Security Risks for Endpoints
*** Passive Information Gathering
- Someone pulls up with a receiver and sniffs the packets being sent on the network
  - Same method used to sniff unencrypted WiFi traffic
  - When sending un-important information, not a large threat

*** Traffic Analysis: Side-Information
- Examine cause and effect of encrypted packet
  - E.g. Each time an xyz packet is sent, that valve opens
  - We do not need to know what xyz is, only what it does
  - Semantic security

*** Subversion of a Node
- Someone “captures” and “interrogates” the node to determine cryptographic information
- Sensor functionality may be compromised by attacker
 
*** Fake Node
- WSNs are self-arranging / self-configuring
- Intruder adds a node to the system
- Node may block passage of real data or transmit false data
- “Sybil” Attack
  - A single node presents multiple ID’s to other nodes
  - Affects geographic routing, distributed storage, multi-path routing, topology maintenance
- How do we tell if a node is “real?”

*** Message Corruption
- Attacks integrity of message
- Intruder inserts itself between source and destination to modify contents of the message
- Use fake/false node?

*** Node Malfunction and Outage
- Node may malfunction and generate inaccurate data
- Node may forward packets incorrectly
- How to detect and remove these nodes?
- Node outage: node just stops working altogether
  - alternative route
  - observability/controllability of the system?
  - how much redundancy is needed where?

*** Denial of Service ("DOS" attack)
- Jamming the radio link
- Exhaust resources
- Re-route data
- Various kinds:
  - Black Hole
    - Node refuses to forward any packets it receives
  - Sink-holes
  - Induced Routing Loops
  - HELLO Flooding

* Symmetric Encryption 

** Cryptography Basics

*** Basic Elements
- Plaintext: original message with no transformation
- Ciphertext: plaintext message after modification to obscure it from normal usage and readability
  - encryption converts plaintext into ciphertext
  - decryption converts ciphertext into plaintext
- Cryptographic algorithm: mathematical operation used to convert plain text into ciphertext
- Key:
    - secret key used to encrypt or decrypt the message

*** Breaking a Cryptographic Algorithm
- Crypto-analysis:
  - Identify patterns based on plaintext to re-generate key
  - Good algorithms generate noisy ciphertext with no discernible patterns
- Brute-force guessing:
  - Keys longer than 128-bits (\(10^38\) possibilities) are generally considered to be acceptable
  - Higher the key width, safer is the encryption


** Brief History of Cryptography
*** Antiquity
- 1500 BC: clay tablets from Mesopotamia
 {{{reveallicense("./figures/skytale.meta","40vh")}}}
  - encrypt a craftsman's recipe for pottery glaze 
- 600~500 BC: Hebrew uses Atbash ciphers
  - Bible:  "The king of Sheshach shall drink after them" – Sheshach meaning Babylon
| Plain  | A | B | C |
| Cipher | Z | Y | X |
- 400 BC~200 AD: "Mlecchita vikalpa" was documented in the Kama Sutra for the purpose of communication between lovers.
- Scytale transposition cipher was used by the Spartan military
- Caesar cipher and its variations used by Julius Caesar:
  - Left shift by 3
  - His nephew, Augustus, uses a similar system of right shift by 1
*** Frequency Analysis
- For a simple substitute cipher, there are \(26!\approx 4\times 10^26\) possible keys 
 {{{reveallicense("./figures/alkindi.meta","40vh")}}}
- Roughly equivalent to 88 bit keys
- In comparison, the DES algorithm proposed in 1975 only has 56-bit key.
- However, substitute cipher are vulnerable to Frequency Analysis
  - First proposed by 9th century by Al-Kindi, an Arab polymath
- Possible solutions:
  - map most common letters to multiple letters
  - map a pair of letters or triplet of letters 
  - change the substitution rules 
*** Frequency of English Letters


*** Kerckhoffs' Principle
/A cryptosystem should be secure even if *everything* about the system, except the *key*, is public knowledge. /
- First formulated in 1883 by Auguste Kerckhoffs, in a journal article on /La Cryptographie Militaire/
- Shannon's Maxim: "the enemy knows the system".
- The "wrong" approach to security is called "security by obscurity":
  - Used by CSS encryption on DVD
  - compromised in 3 years

*** Zimmermann Telegram
*** Enigma Machine

** Symmetric Encryption

*** Data Encryption Standard


*** Advanced Encryption Standard
*** One-time-pad
** Authenticated Encryption

*** Cryptographic Hash Functions
- A function H that takes an arbitrary size input \(m\)
- and produces a *fixed* length output H(m). 
  - The output length is typically 128–1024 bits.
- A Hash be viewed as the finger print of the original message
  - Hard to find 2 people with same fingerprint
  - Given a person, it's easy to get his/her fingerprint
  - However given a fingerprint, it's hard to find the person it came from 
- Similarly
  - Hard to find two message with the same hash (collision resistance)
  - one-way

*** Strong and Weak Collision Resistance
- The once popular MD5 hash has a digest size of 128 bits.
- We want to find an input corresponding to a *specific hash* by brute force
  - We need to do \(2^128\) search on average
- However, how much search we need to do if we want to find 2 inputs sharing the *same hash* by brute force?
  - Surprisingly, only \(2^64\) search is needed due to birthday paradox!

*** Birthday paradox
- How likely this class of 30 students to contain two people with the same birthday?
- The answer is roughly 71%!
- The probability of *NOT* having two person with the same birthday (assuming no leap year) is
\[P=\left(1-\frac{0}{365}\right) \left(1-\frac{1}{365}\right)\dots\left(1-\frac{n-1}{365}\right)\]
- Notice that \(1-x \approx \exp(-x)\)
\[P\approx\exp\left(-frac{\sum_{i=0}^{n-1}i}{365}\right)=\exp\left(-frac{n(n-1)}{730}\right).\]

*** MD5 and SHA-1 
- MD5 was invented in 1991
  - Digest size is 128 bits
- The strong collision resistance of MD5 was broken by Wang Xiaoyun in 2004. 
- Now possible to find collisions in mere seconds. 
- SHA-1 was released by the NSA in 1995
  - Digest size is 160 bits
- Best attack, also from Prof. Wang, on SHA-1 requires \(2^{63}\) search.


* Key Management for Wireless Networks

** Overview
- The goal is to establish *secure* communication between endpoints in a wireless network.
- Possible schemes using symmetric keys:
  - Single Network-wide key
  - Pair-wise Keys
  - Bootstrapping off of Trusted Base-station
  - Random Key Pre-distribution
- Alternatively, one could use asymmetric cryptography, which will be discussed later

** Single Network-wide Key
Using a Single Network-wide Key
Simple technique
1. Pre-load onto all nodes prior to deployment
2. After deployment, establish communication with neighbors with shared key
3. Encrypt all communication in shared key and append MAC (message authentication code) for integrity

*** Pros and Cons

Pros:
• Minimal storage required
• No additional steps in scheme
• Resistant against DoS and packet injection
– Provided adversary doesn’t know the key with communication
– Replay can be avoided by sending source, destination, and timestamp
Drawbacks
• If single node is compromised, security is lost
• Impractical unless:
– Nodes are tamper-resistant
– No new nodes are ever added after deployment

** Using Pair-wise Keys
• Every node shares a unique symmetric key with every other node on the network
• After deployment, nodes must perform key discovery to verify the identification of neighbors

*** Pros and Cons
Properties
• Perfect resilience against node capture
• Revocation of compromised keys
• Uses only symmetric cryptography
– Allows for cheaper nodes
– Less susceptible to DoS
Drawbacks
• Poor scalability
– With an 80-bit key, a 100- node network requires 1KB storage on each node
– Memory limitations make large networks infeasible

** Bootstrapping Security from Trusted Base Station
1. Prior to deployment, symmetric key generated for each node and stored
   - in order to communicate with the base station 
2. Nodes authenticate to base station using secret master key
3. Base station generates link key for two nodes to communicate

*** Pros and Cons
Properties
• Small memory requirement
• Perfect resilience to node capture
• Revocation of nodes is simple
• Node replication is easily controlled
– All key establishment goes through base station. If the number of links of any node is too high, station can refuse to generate new link keys for the node
Drawbacks
• Not scalable
– High communication overhead
– All key establishment goes through base-station, which in large networks may be many hops away
• Base station becomes target for compromise
– Single point of failure
** Random Key Pre-distribution
– Random set of keys, S, chosen. For each node, m keys are selected and stored in memory (key ring)
– Size of S, |S|, chosen such that any two random subsets of size m will share at least one key with a probability of p Key Setup
– Nodes perform key discovery to determine neighbors with shared key
Forms connected graph of secure links
– Nodes can set up path keys with neighboring nodes that lack a shared key
- Erdos–Renyi graph: Consider a graph with \(n\) vertices and each pair of vertices is connected independently with probability \(p\), then
  - If \(p < (1- \epsilon)\log n/n\), then the graph contains isolated vertices a.s. 
  - If \(p > (1+ \epsilon)\log n/n\), then the graph is connected a.s. 
** Asymmetric Keys
- Prior to deployment, master public/private key-pair generated.  
- For every Node A, a public/private key-pair is generated and stored along with master key’s signature on \(K_A\).
- Nodes perform key exchange. Once public key is verified, a symmetric link key is generated to be used as session key
  - e.g., using Diffie-Hellman

*** Pros and Cons
Properties
• Resilient against node capture
– Nodes have no knowledge of other secret link keys
• Revocation possible
– Broadcast of revoked key-pair signed by master will result in revocation
• Scalable
– Scheme retains effectiveness regardless of number of nodes

Drawbacks
• Dependence on asymmetric key cryptographic hardware or software
– Computationally intensive
– Nodes may lack integer multiplication unit
• Vulnerability to DoS
– Digital signature verification is resource-consuming
– Floods of illegal signatures can drain batteries
• No resistance to node replication
– By capturing one node, links can be set up with all other nodes, creating “omnipresence”

* Modular Arithmetic 
*** Congruence
- Given an integer \(n > 1\), called a modulus, two integers are said to be *congruent* modulo \(n\), if there is an integer \(k\) such that 
\[a − b = kn.\] 
- We write \(a \equiv b (mod\;n)\).
- One can verify that congruence is an equivalent relationship.
  - Symmetric
  - Reflexive
  - Transitive
*** Modular Arithmetic: Addition and Multiplication
- Addition and multiplication have the same properties as addition and multiplications on real numbers:
  - Associative
  - Commutative
  - Distributive
- Subtraction is trivial:
  - \(a + b \equiv c\; (mod\;n)\Rightarrow b\equiv c+(n-a)\;(mod\;n).\)
*** Modular Arithmetic: Inverse and Division
- If \(a\) and \(n\) are coprime, then \(gcd(a,n)=1\).
- Notice that the gcd can be computed via Euclidean Division.
- There exists integer \(x,\,y\) such that
\[xa+yn=1.\]
- or \(xa  \equiv 1\; (mod\;n)\).
- \(a b \equiv c\; (mod\;n)\Rightarrow b\equiv cx\;(mod\;n).\)
*** Modular Arithmetic: Power and Logarithm 
- How to compute \(c \equiv a^b\; (mod\;n)\)?
- Can be done in roughly \(O(\log(b))) multiplications.
- On the other hand, there is no known fast algorithm to solve the discrete logarithm problem.
  - Finding \(b = \log_a c\) is hard!
  - However, efficient algorithms for quantum computer exists

*** Euler's Theorem
- Consider the set of numbers that are
  - less than n;
  - and coprime to n.
- Important observation:
  - If \(a\) and \(b\) are coprime to \(n\), then \(ab\) is coprime to \(n\).
  - If \(a\) is coprime to \(n\), then we can find \(a^{-1}\) coprime to \(n\).
  - In other words, such set is an Abelian group under modulo multiplication.
- Euler's Totient Function \(\phi(n)\): size of such set
- For example: \(\phi(6) = |\{1,5\}| = 2.\)
- If \(p\) and \(q\) are prime, then
  - \(\phi(p) = p-1.\) (Fermat's Little Theorem)
  - \(\phi(pq) = pq - p - q +1.\)
  - Computing \(\phi(pq)\) is the same as factorizing \(pq\).
  - No know fast factorization algorithm exists 
  - However, efficient quantum algorithm exists

*** Euler's Theorem
- Euler's Theorem: If \(a\) and \(n\) are coprime, then
\[a^{\phi(n)}\equiv 1; (mod\;n).\]
- If \(ed \equiv 1; (mod\;\phi(n))\), and \(a\) is coprime to \(n\) then \[a^{ed} \equiv a^{k\phi(n)}\times a\equiv a; (mod\;n).\]
  - The \(e\)th-root of \(a\) is \(a^d\), or vice versa.
- If we know \(\phi(n)\), then we can easily generate compute \(d\)
- However, computing \(d\) without knowing \(\phi(n)\) is considered to be difficult
* Diffie-Hellman Key Exchange
  
** Diffie-Hellman Key Exchange
- Named after Whitfield Diffie and Martin Hellman.
- First published in 1976
- The first public key exchange algorithm
- Both received Turing Award in 2015
*** DH Protocol
| Alice                     | Public Information                 | Bob                      |
| \(p, g , a\)              |                                    |                          |
|                           | \(p, g , g^a(mod\;p)\)             |                          |
|                           |                                    | \(p, g , g^a(mod\;p),b\) |
|                           | \(p, g , g^a(mod\;p),g^b(mod\;p)\) |                          |
| \(p, g , a, g^b(mod\;p)\) |                                    |                          |

- The secret is generated as
\[s \equiv g^{ab} \equiv (g^a)^b \equiv (g^b)^a \;(mod\;p).\]
- However, the ones passively observing the public channel only have \(g^a(mod\;p),\,g^b(mod\;p)\) 
  - \(a,b\) cannot be deduced since discrete logarithm is hard
  - No fast algorithm known to compute the secret

** Man-in-the-Middle Attack
| Alice                         | Eve                                             | Bob                           |
| \(p, g , a\)                  |                                                 |                               |
|                               | \(p, g , g^a(mod\;p), \alpha, \beta\)           |                               |
|                               |                                                 | \(p, g , g^\alpha(mod\;p),b\) |
|                               | \(p, g , g^a(mod\;p),g^b(mod\;p),\alpha,\beta\) |                               |
| \(p, g , a, g^\beta(mod\;p)\) |                                                 |                               |
- Eve replace \(g^a(mod\;p)\) from Alice by \(g^\alpha(mod\;p)\);
- and replace \(g^b(mod\;p)\) from Bob by \(g^\beta(mod\;p)\)
- Alice will compute the secret as
\[s_a \equiv g^{a\beta}\;(mod\;p).\]
- Bob will compute the secret as
\[s_b \equiv g^{\alpha b}\;(mod\;p).\]
- Both can be computed by Eve
- To avoid man in the middle attack, Alice and Bob need to verify that \(g^a(mod\;p)\) and \(g^b(mod\;p)\) come from the *correct* user.

* Asymmetric Encryption 

** RSA 

- Named after Ron Rivest, Adi Shamir, and Leonard Adleman
- First published in 1977 
- The first public key algorithm
- All received Turing Award in 2002

*** RSA
- If Alice know two large prime \(p\) and \(q\), then
  - she can compute \(\phi(pq) = pq-p-q+1\)
  - and generate \(e\) and \(d\), such that \(ed\equiv 1 \;(mod\;\phi(pq))\)
- \(pq, e\) is the public key
- \(d\) is the private key for Alice
- By Euler's theorem, given \(a^e\;(mod\;pq)\), Alice can find \(a\) by \[a \equiv (a^e)^d \;(mod\;pq).\]
  - This holds true even if \(a\) is not coprime to \(pq\), which is highly unlikely
  - Need to leverage Chinese remainder theorem
- However, this is very difficult for others who do not know \(d\)

** Digital Signature

- By Euler's theorem, given \(a^d\;(mod\;pq)\), any one can compute \(a\) by \[a \equiv (a^d)^e \;(mod\;pq).\]
  - \(e\) is publicly known
- Now Alice can send the message \((a, a^d\;(mod\;pq))\)
  - It proves that the sender knows \(d\);
  - without the sender actually revealing \(d\)!
  - hence the sender is Alice;
  - and \(a\) is sent by her.
- Digital signature also provide non-repudiation
- Usually combined with hash function

*** Public Key Infrastructure

- A PKI is an arrangement that binds public keys with respective identities of entities (like people and organizations).
- A certificate authority (CA) that stores, issues and signs the digital certificates
  - done via the CA's own private key
  - the trust in the user key relies on one's trust in the CA's key.
- Alternatively one could adopt a decentralized approach:
  - Web of trust: can you trust your friend's friend?
  - Blockchain PKI?

* Transport Layer Security 

TLS and SSL do not fit neatly into any single layer of the OSI model or the TCP/IP model.[8][9] TLS runs "on top of some reliable transport protocol (e.g., TCP),"[10] which would imply that it is above the transport layer. It serves encryption to higher layers, which is normally the function of the presentation layer. However, applications generally use TLS as if it were a transport layer,[8][9] even though applications using TLS must actively control initiating TLS handshakes and handling of exchanged authentication certificates.[10]


* Security of Cyber-Physical System
** Overview


*** Countermeasures: Defense in Depth 
  - Defense in Depth{{{reveallicense("./defense.meta","40vh",nil,'none)}}} 
    - Prevention
      - Using cryptography/coding to preserve confidentiality (privacy)
    - Detection
      - Fault Detection and Isolation (FDI)
      - Active Detection
    - Resiliency
      - Off-line: Resilient system design
      - On-line: Secure information fusion, control
    - Recovery
      - Software rejuvenation
      - Patching 
    - ...

** Active Detection against Replay Attack

*** Stuxnet 
    
    - NY times: /The worm itself now appears to have included two major components. One was designed to send Iran's nuclear centrifuges spinning wildly out of control. Another seems right out of the movies: *The computer program also secretly recorded what normal operations at the nuclear plant looked like, then played those readings back to plant operators*, like a pre-recorded security tape in a bank heist, so that it would appear that everything was operating normally while the centrifuges were actually tearing themselves apart./

*** System Description
    #+BEGIN_leftcol
    #+HTML: <div class="r-stack">
    #+ATTR_HTML: :class fragment fade-out :data-fragment-index 0
    [[./replaydiagramone.svg]]
    #+ATTR_HTML: :class fragment :data-fragment-index 0
    [[./replaydiagramtwo.svg]]
    #+HTML: </div>
    - Assumptions: Linear Gaussian systems, Linear state estimator+state feedback, \(\chi_2\) failure detector.
    #+END_leftcol
    #+ATTR_REVEAL: :frag appear
    #+BEGIN_rightcol
    {{{revealimg("./replayunstableA.meta","Detection Rate v.s. Time","40vh",nil,'none)}}}
    Not all system can detect replay attack!
    #+END_rightcol
 
*** Active Detection via Physical Watermarking
    #+BEGIN_leftcol
    - Change the control law by adding a zero mean i.i.d. Gaussian watermarking signal \(\zeta(k)\):
    \[ u(k) = \text{Optimal LQG Control}+ \zeta(k).\]
    {{{revealimg("./replaywithphywatermark.meta","Watermark","40vh",nil,'none)}}}
    #+END_leftcol
    #+BEGIN_rightcol
    - Optimizing the covariance of \(\zeta(k)\):
     \[ \begin{align*}
        & \mathop{\textit{max}}&
        & Detection\;Performance \\
        &\text{s.t.}&
        &Ctrl\;Loss\leq\delta
      \end{align*}\]
    - Can be relaxed into semidefinite programming cite:Mo2014
    - The problem can be solved on-line, without explicit system knowledge cite:Liu2020
    - Other watermarking schemes (e.g., multiplicative watermark) cite:Ferrari2020, cite:Satchidanandan2017
    #+END_rightcol
   
*** Simulation: Tennessee Eastman Process
    #+BEGIN_leftcol
    - The TEP is a realistic industrial model for process control.
      {{{revealimg("./simplifiedmodel.meta","TEP Model","40vh",nil,'none)}}}
    - The simplified model contain 4 inputs, 4 outputs and 7 internal states.
    #+END_leftcol
    #+BEGIN_rightcol
    {{{revealimg("./gng_te.meta","Detection Performance","40vh",nil,'none)}}}
    - Physical watermarks enable replay attack detection.
    - The optimal watermark signal and detector can be learned using data-driven approach.
    #+END_rightcol

** Secure State Estimation

*** Static State Estimation
    - Sensor model:
    \[\begin{bmatrix}
    y_1\\
    \vdots\\
    y_m
    \end{bmatrix} = Hx + noise + attack. \]
    - The noise is *small* (zero mean Gaussian or bounded) but *ubiquitous*.
    - The attack is \(p\)-*sparse* but can be *arbitrarily large*.
    - Originally proposed by Peng et al.cite:Liu2011 in the context of DC power flow model.

*** Fundamental Limit for Noiseless Case
    - The system is called \(p\)-observable if $H$ is full column rank even after removing rows corresponding to an arbitrary set of \(p\) sensors.
    - The system is NOT \(p\)-observable \(\Rightarrow\) There exists undetectable attack.
    - The system is NOT \(2p\)-observable \(\Rightarrow\) There exists unidentifiable attack.
    - The system is NOT \(2p\)-observable \(\Rightarrow\) One cannot "securely" estimate the state with bounded error.
    - The "secure" estimation problem is *NP-hard* in general cite:Hendrickx2014, cite:Mao2019

*** Secure Static Estimator
    #+BEGIN_leftcol
    - Estimator with Combinatorial Complexity cite:Fawzi2014, cite:Ren2020, e.g.,
\[  \begin{align*}
        & \mathop{\textit{minimize}}\limits_{\hat x,a,w}&
        & \|w\|^2 \\
        &\text{subject to}&
        &y = H \hat x + w + a,\\
    &&
    &\|a\|_0\leq p.
      \end{align*}\]
    - Require \(2p\)-observable to be "secure"
    - Achieves fundamental limit
    #+END_leftcol
    #+BEGIN_rightcol
    - Convex optimization based estimator cite:Han2019
    \[\hat x = \mathop{argmin}_{\hat x} f_i (y_i - H_i\hat x)\]
    - Require stronger condition than \(2p\)-observable to generate "secure" estimate.
    #+END_rightcol
   
*** Simulation: IEEE 14-Bus System 
    #+BEGIN_leftcol
    - The system has 27 sensors and 13 states
    {{{revealimg("./ieee14.meta","IEEE 14-Bus System","40vh",nil,'none)}}}
    - The power flow meter on the red line is being attacked
    #+END_leftcol
    #+BEGIN_rightcol
    {{{revealimg("./ieee14lasso.meta","Stuxnet Incident","40vh",nil,'none)}}}
    - With fine-tuned parameters, we can design a "good" estimator both in the *absence* and in the *presence* of attacks.
    #+END_rightcol
   

* Conclusion
* Bibliography
  :PROPERTIES:
  :CUSTOM_ID: bibliography
  :END:

  printbibliography:references.bib

  # Local Variables:
  # indent-tabs-mode: nil
  # org-src-preserve-indentation: t
  # End:
